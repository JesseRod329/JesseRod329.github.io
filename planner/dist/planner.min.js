class PlannerFormHandler {constructor() {this.form = null;this.taskContainer = null;this.taskCounter = 0;this.formData = {personalInfo:{},tasks:[],notes:{},state:'idle' };this.init()} init() {if (document.readyState === 'loading') {document.addEventListener('DOMContentLoaded',() => this.setup())} else {this.setup()} } setup() {this.form = document.getElementById('planner-form');this.taskContainer = document.getElementById('task-list-container');if (!this.form || !this.taskContainer) {console.warn('Planner form elements not found');return} this.setupEventListeners();this.setupFormValidation();this.initializeForm();this.setDefaultDate()} setupEventListeners() {const addTaskBtn = document.getElementById('add-task-btn');if (addTaskBtn) {addTaskBtn.addEventListener('click',() => this.addTask());addTaskBtn.addEventListener('keydown',(e) => {if (e.key === 'Enter' || e.key === ' ') {e.preventDefault();this.addTask()} })} this.form.addEventListener('submit',(e) => this.handleFormSubmit(e));const clearBtn = document.getElementById('clear-form-btn');if (clearBtn) {clearBtn.addEventListener('click',() => this.clearForm());clearBtn.addEventListener('keydown',(e) => {if (e.key === 'Enter' || e.key === ' ') {e.preventDefault();this.clearForm()} })} this.form.addEventListener('input',(e) => this.handleFormInput(e));this.form.addEventListener('change',(e) => this.handleFormChange(e));document.addEventListener('keydown',(e) => this.handleKeyboardShortcuts(e));this.createLiveRegion()} setupFormValidation() {this.validationMessages = {valueMissing:'This field is required',tooShort:'Please enter at least {minLength} characters',tooLong:'Please enter no more than {maxLength} characters',typeMismatch:'Please enter a valid value',patternMismatch:'Please match the requested format' }} initializeForm() {if (this.taskContainer.children.length === 0) {this.showEmptyState()} this.updateFormState('idle')} setDefaultDate() {const dateInput = document.getElementById('planner-date');if (dateInput && !dateInput.value) {const today = new Date();const tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);dateInput.value = tomorrow.toISOString().split('T')[0]} } addTask() {const taskData = this.getCurrentTaskInputs();if (!this.validateTaskInputs(taskData)) {return} const taskId = `task-${++this.taskCounter}`;const taskElement = this.createTaskElement(taskId,taskData);this.taskContainer.appendChild(taskElement);this.animateTaskIn(taskElement);this.clearTaskInputs();this.formData.tasks.push({id:taskId,time:taskData.time,description:taskData.description,priority:taskData.priority });this.updatePreview();this.showNotification('Task added successfully!','success')} getCurrentTaskInputs() {return {time:document.getElementById('task-time').value,description:document.getElementById('task-description').value,priority:document.getElementById('task-priority').value }} validateTaskInputs(taskData) {let isValid = true;if (!taskData.time) {this.showFieldError('task-time','Please select a time');isValid = false} else {this.clearFieldError('task-time')} if (!taskData.description || taskData.description.length < 3) {this.showFieldError('task-description','Please enter a task description (at least 3 characters)');isValid = false} else {this.clearFieldError('task-description')} if (!taskData.priority) {this.showFieldError('task-priority','Please select a priority level');isValid = false} else {this.clearFieldError('task-priority')} if (!isValid) {this.showNotification('Please fix the errors above','error')} return isValid} createTaskElement(taskId,taskData) {const taskDiv = document.createElement('div');taskDiv.className = 'task-item';taskDiv.dataset.taskId = taskId;const priorityClass = `priority-${taskData.priority}`;const priorityIcon = this.getPriorityIcon(taskData.priority);taskDiv.innerHTML = ` <div class="task-time">${taskData.time}</div> <div class="task-content"> <div class="task-description">${this.escapeHtml(taskData.description)}</div> <div class="task-priority ${priorityClass}"> <span class="priority-icon">${priorityIcon}</span> <span class="priority-text">${taskData.priority}</span> </div> </div> <div class="task-actions"> <button type="button" class="btn btn-sm btn-edit" onclick="plannerFormHandler.editTask('${taskId}')" aria-label="Edit task"> <span class="btn-icon">‚úèÔ∏è</span> </button> <button type="button" class="btn btn-sm btn-delete" onclick="plannerFormHandler.removeTask('${taskId}')" aria-label="Remove task"> <span class="btn-icon">üóëÔ∏è</span> </button> </div> `;return taskDiv} getPriorityIcon(priority) {const icons = {low:'üü¢',medium:'üü°',high:'üü†',urgent:'üî¥' };return icons[priority] || '‚ö™'} animateTaskIn(element) {element.style.opacity = '0';element.style.transform = 'translateY(-20px)';requestAnimationFrame(() => {element.style.transition = 'all 0.3s ease';element.style.opacity = '1';element.style.transform = 'translateY(0)'})} animateTaskOut(element,callback) {element.style.transition = 'all 0.3s ease';element.style.opacity = '0';element.style.transform = 'translateY(-20px)';setTimeout(() => {if (callback) callback()},300)} removeTask(taskId) {const taskElement = document.querySelector(`[data-task-id="${taskId}"]`);if (!taskElement) return;this.animateTaskOut(taskElement,() => {taskElement.remove();this.formData.tasks = this.formData.tasks.filter(task => task.id !== taskId);if (this.formData.tasks.length === 0) {this.showEmptyState()} this.updatePreview();this.showNotification('Task removed','info')})} editTask(taskId) {const task = this.formData.tasks.find(t => t.id === taskId);if (!task) return;document.getElementById('task-time').value = task.time;document.getElementById('task-description').value = task.description;document.getElementById('task-priority').value = task.priority;this.removeTask(taskId);document.getElementById('task-description').focus();this.showNotification('Task loaded for editing','info')} clearTaskInputs() {document.getElementById('task-time').value = '';document.getElementById('task-description').value = '';document.getElementById('task-priority').value = ''} showEmptyState() {this.taskContainer.innerHTML = ` <div class="task-list-empty"> <div class="empty-state"> <div class="empty-state-icon">üìù</div> <h3 class="empty-state-title">No tasks yet</h3> <p class="empty-state-description">Add your first task above to get started</p> </div> </div> `} handleFormInput(e) {const input = e.target;this.validateField(input);if (input.id === 'planner-name' || input.id === 'planner-date') {this.updatePreview()} } handleFormChange(e) {const input = e.target;this.updateFormData(input);this.updatePreview()} validateField(input) {const isValid = input.checkValidity();if (isValid) {this.clearFieldError(input.id)} else {const errorMessage = this.getValidationMessage(input);this.showFieldError(input.id,errorMessage)} return isValid} getValidationMessage(input) {const validity = input.validity;if (validity.valueMissing) {return this.validationMessages.valueMissing} if (validity.tooShort) {return this.validationMessages.tooShort.replace('{minLength}',input.minLength)} if (validity.tooLong) {return this.validationMessages.tooLong.replace('{maxLength}',input.maxLength)} if (validity.typeMismatch) {return this.validationMessages.typeMismatch} return 'Please enter a valid value'} showFieldError(fieldId,message) {const field = document.getElementById(fieldId);if (!field) return;this.clearFieldError(fieldId);field.classList.add('error');const errorDiv = document.createElement('div');errorDiv.className = 'form-error';errorDiv.id = `${fieldId}-error`;errorDiv.innerHTML = `‚ö†Ô∏è ${message}`;field.parentNode.insertBefore(errorDiv,field.nextSibling)} clearFieldError(fieldId) {const field = document.getElementById(fieldId);if (!field) return;field.classList.remove('error');const errorDiv = document.getElementById(`${fieldId}-error`);if (errorDiv) {errorDiv.remove()} } updateFormData(input) {const fieldName = input.name || input.id;if (fieldName === 'planner-name') {this.formData.personalInfo.name = input.value} else if (fieldName === 'planner-date') {this.formData.personalInfo.date = input.value} else if (fieldName === 'notes') {this.formData.notes.notes = input.value} else if (fieldName === 'reminders') {this.formData.notes.reminders = input.value} } updatePreview() {const event = new CustomEvent('plannerFormDataChanged',{detail:this.getFormData() });document.dispatchEvent(event)} getFormData() {return {personalInfo:this.formData.personalInfo,tasks:this.formData.tasks,notes:this.formData.notes,state:this.formData.state }} generateTaskPreview() {if (this.formData.tasks.length === 0) {return '<p class="preview-no-tasks">No tasks added yet</p>'} const sortedTasks = [...this.formData.tasks].sort((a,b) => a.time.localeCompare(b.time));return sortedTasks.map(task => ` <div class="preview-task"> <span class="preview-task-time">${task.time}</span> <span class="preview-task-description">${this.escapeHtml(task.description)}</span> <span class="preview-task-priority priority-${task.priority}">${this.getPriorityIcon(task.priority)}</span> </div> `).join('')} handleFormSubmit(e) {e.preventDefault();if (!this.validateForm()) {this.showNotification('Please fix the errors before submitting','error');return} this.updateFormState('generating');this.showProgress();setTimeout(() => {this.generatePlanner()},2000)} validateForm() {let isValid = true;const requiredFields = this.form.querySelectorAll('[required]');requiredFields.forEach(field => {if (!this.validateField(field)) {isValid = false} });if (this.formData.tasks.length === 0) {this.showNotification('Please add at least one task','error');isValid = false} return isValid} showProgress() {const progressDiv = document.getElementById('form-progress');if (progressDiv) {progressDiv.style.display = 'block'} } hideProgress() {const progressDiv = document.getElementById('form-progress');if (progressDiv) {progressDiv.style.display = 'none'} } generatePlanner() {this.updateFormState('complete');this.hideProgress();const previewSection = document.getElementById('planner-preview');if (previewSection) {previewSection.style.display = 'block';previewSection.scrollIntoView({behavior:'smooth' })} this.showNotification('Your planner has been generated!','success')} clearForm() {if (confirm('Are you sure you want to clear all form data?')) {this.form.reset();this.taskContainer.innerHTML = '';this.showEmptyState();this.formData = {personalInfo:{},tasks:[],notes:{},state:'idle' };this.taskCounter = 0;this.clearAllFieldErrors();const previewSection = document.getElementById('planner-preview');if (previewSection) {previewSection.style.display = 'none'} this.setDefaultDate();this.updateFormState('idle');this.showNotification('Form cleared','info')} } clearAllFieldErrors() {const errorElements = this.form.querySelectorAll('.form-error');errorElements.forEach(error => error.remove());const errorFields = this.form.querySelectorAll('.error');errorFields.forEach(field => field.classList.remove('error'))} updateFormState(state) {this.formData.state = state;this.form.dataset.state = state} handleKeyboardShortcuts(e) {if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {e.preventDefault();this.form.dispatchEvent(new Event('submit'))} if (e.key === 'Escape') {this.clearForm()} } showNotification(message,type = 'info') {const existing = document.querySelector('.notification');if (existing) {existing.remove()} const notification = document.createElement('div');notification.className = `notification notification-${type}`;notification.textContent = message;Object.assign(notification.style,{position:'fixed',top:'20px',right:'20px',padding:'12px 20px',borderRadius:'8px',color:'white',fontWeight:'500',zIndex:'1000',transform:'translateX(100%)',transition:'transform 0.3s ease',maxWidth:'300px',wordWrap:'break-word' });const colors = {error:'#ef4444',success:'#10b981',info:'#3b82f6',warning:'#f59e0b' };notification.style.background = colors[type] || colors.info;document.body.appendChild(notification);requestAnimationFrame(() => {notification.style.transform = 'translateX(0)'});setTimeout(() => {notification.style.transform = 'translateX(100%)';setTimeout(() => {if (notification.parentNode) {notification.parentNode.removeChild(notification)} },300)},3000)} escapeHtml(text) {const div = document.createElement('div');div.textContent = text;return div.innerHTML} createLiveRegion() {const liveRegion = document.createElement('div');liveRegion.id = 'live-region';liveRegion.setAttribute('aria-live','polite');liveRegion.setAttribute('aria-atomic','true');liveRegion.className = 'sr-only';document.body.appendChild(liveRegion);this.liveRegion = liveRegion} announceToScreenReader(message) {if (this.liveRegion) {this.liveRegion.textContent = message;setTimeout(() => {this.liveRegion.textContent = ''},1000)} } handleKeyboardShortcuts(e) {if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {e.preventDefault();const generateBtn = document.getElementById('generate-planner-btn');if (generateBtn && !generateBtn.disabled) {this.handleFormSubmit(e)} } if (e.key === 'Escape' && e.target.tagName !== 'INPUT' && e.target.tagName !== 'TEXTAREA') {if (confirm('Are you sure you want to clear the form?')) {this.clearForm()} } } createTaskElement(taskId,taskData) {const taskElement = document.createElement('div');taskElement.className = 'task-item';taskElement.dataset.taskId = taskId;taskElement.setAttribute('role','listitem');taskElement.setAttribute('aria-label',`Task:${taskData.description} at ${taskData.time},${taskData.priority} priority`);taskElement.innerHTML = ` <div class="task-time" aria-label="Time:${taskData.time}">${taskData.time}</div> <div class="task-content"> <div class="task-description" aria-label="Description:${this.escapeHtml(taskData.description)}">${this.escapeHtml(taskData.description)}</div> <div class="task-priority priority-${taskData.priority}" aria-label="Priority:${taskData.priority}"> ${this.getPriorityIcon(taskData.priority)} </div> </div> <div class="task-actions" role="group" aria-label="Task actions"> <button class="task-btn btn-edit" aria-label="Edit task:${this.escapeHtml(taskData.description)}" title="Edit this task"> <span class="btn-icon" aria-hidden="true">‚úèÔ∏è</span> </button> <button class="task-btn btn-delete" aria-label="Delete task:${this.escapeHtml(taskData.description)}" title="Delete this task"> <span class="btn-icon" aria-hidden="true">üóëÔ∏è</span> </button> </div> `;return taskElement} getPriorityIcon(priority) {const icons = {urgent:'üî¥',high:'üü†',medium:'üü°',low:'üü¢' };return icons[priority] || '‚ö™'} addTask() {const taskData = this.getCurrentTaskInputs();if (!this.validateTaskInputs(taskData)) {this.announceToScreenReader('Please fix the errors before adding the task');return} const taskId = `task-${++this.taskCounter}`;const taskElement = this.createTaskElement(taskId,taskData);this.taskContainer.appendChild(taskElement);this.animateTaskIn(taskElement);this.clearTaskInputs();this.formData.tasks.push({id:taskId,time:taskData.time,description:taskData.description,priority:taskData.priority });this.updatePreview();this.showNotification('Task added successfully!','success');this.announceToScreenReader(`Task added:${taskData.description} at ${taskData.time}`);const editBtn = taskElement.querySelector('.btn-edit');if (editBtn) {editBtn.focus()} } removeTask(taskId) {const taskElement = document.querySelector(`[data-task-id="${taskId}"]`);if (!taskElement) return;const taskDescription = taskElement.querySelector('.task-description').textContent;this.animateTaskOut(taskElement,() => {taskElement.remove();this.formData.tasks = this.formData.tasks.filter(task => task.id !== taskId);if (this.formData.tasks.length === 0) {this.showEmptyState()} this.updatePreview();this.showNotification('Task removed','info');this.announceToScreenReader(`Task removed:${taskDescription}`)})} } let plannerFormHandler;if (document.readyState === 'loading') {document.addEventListener('DOMContentLoaded',() => {plannerFormHandler = new PlannerFormHandler()})} else {plannerFormHandler = new PlannerFormHandler()} class CircularPlannerGenerator {constructor() {this.formHandler = null;this.plannerContainer = null;this.previewSection = null;this.currentPlannerData = null;this.isGenerating = false;this.init()} init() {if (document.readyState === 'loading') {document.addEventListener('DOMContentLoaded',() => this.setup())} else {this.setup()} } setup() {this.plannerContainer = document.getElementById('planner-preview-section');this.previewSection = document.getElementById('planner-preview-section');if (!this.plannerContainer) {console.warn('Planner container not found');return} this.setupEventListeners();this.initializePlanner()} setupEventListeners() {document.addEventListener('plannerFormDataChanged',(event) => {this.updatePreview(event.detail)});const generateBtn = document.getElementById('generate-planner-btn');if (generateBtn) {generateBtn.addEventListener('click',() => this.generatePlanner())} const exportBtn = document.getElementById('export-btn');if (exportBtn) {exportBtn.addEventListener('click',() => this.exportPlanner())} } initializePlanner() {this.showEmptyState()} showEmptyState() {this.plannerContainer.innerHTML = ` <div class="planner-empty-state"> <div class="empty-state-icon">üìÖ</div> <h3>Ready to Plan Your Day</h3> <p>Fill out the form above to generate your personalized circular daily planner.</p> <div class="empty-state-features"> <div class="feature-item"> <span class="feature-icon">üé®</span> <span>Theme-aware design</span> </div> <div class="feature-item"> <span class="feature-icon">‚è∞</span> <span>Time-based organization</span> </div> <div class="feature-item"> <span class="feature-icon">üì±</span> <span>Mobile responsive</span> </div> </div> </div> `} updatePreview(formData) {if (!formData || !formData.tasks || formData.tasks.length === 0) {this.showEmptyState();return} this.createPreview(formData)} createPreview(formData) {const tasks = formData.tasks.filter(task => task.time && task.description);if (tasks.length === 0) {this.showEmptyState();return} this.plannerContainer.innerHTML = ` <div class="planner-preview"> <div class="preview-header"> <h3>Preview</h3> <p>${tasks.length} task${tasks.length !== 1 ? 's' :''} ready</p> </div> <div class="preview-tasks"> ${tasks.slice(0,3).map(task => ` <div class="preview-task"> <span class="preview-time">${task.time}</span> <span class="preview-description">${this.escapeHtml(task.description)}</span> <span class="preview-priority priority-${task.priority}">${task.priority}</span> </div> `).join('')} ${tasks.length > 3 ? `<div class="preview-more">+${tasks.length - 3} more tasks</div>` :''} </div> <div class="preview-actions"> <button class="btn btn-primary" id="generate-planner-btn"> Generate Full Planner </button> </div> </div> `;const generateBtn = document.getElementById('generate-planner-btn');if (generateBtn) {generateBtn.addEventListener('click',() => this.generatePlanner())} } async generatePlanner() {if (this.isGenerating) return;this.isGenerating = true;this.setFormState('generating');try {const formData = this.getFormData();if (!formData.tasks || formData.tasks.length === 0) {this.showNotification('Please add at least one task to generate your planner','error');return} await this.renderCircularPlanner(formData);this.currentPlannerData = formData;this.showNotification('Planner generated successfully!','success')} catch (error) {console.error('Error generating planner:',error);this.showNotification('Error generating planner. Please try again.','error')} finally {this.isGenerating = false;this.setFormState('complete')} } async renderCircularPlanner(formData) {const tasks = formData.tasks.filter(task => task.time && task.description);this.plannerContainer.innerHTML = ` <div class="circular-planner"> <div class="planner-header"> <h2>${formData.personalInfo.name || 'Daily Planner'}</h2> <p class="planner-date">${this.formatDate(formData.personalInfo.date)}</p> </div> <div class="planner-content"> <div class="time-wheel-container"> <div class="time-wheel" id="time-wheel"> <div class="wheel-center"> <div class="center-date">${this.formatDateShort(formData.personalInfo.date)}</div> <div class="center-time" id="current-time">${this.getCurrentTime()}</div> <div class="center-name">${formData.personalInfo.name || 'You'}</div> </div> </div> </div> <div class="tasks-panel"> <div class="tasks-header"> <h3>Today's Tasks</h3> <div class="task-stats"> <span class="stat-item"> <span class="stat-number">${tasks.length}</span> <span class="stat-label">Total</span> </span> <span class="stat-item"> <span class="stat-number">${tasks.filter(t => t.priority === 'high').length}</span> <span class="stat-label">High Priority</span> </span> </div> </div> <div class="tasks-list" id="tasks-list"> ${this.renderTaskList(tasks)} </div> </div> </div> ${formData.notes.notes || formData.notes.reminders ? ` <div class="notes-section"> <h3>Notes & Reminders</h3> <div class="notes-content"> ${formData.notes.notes ? ` <div class="notes-item"> <h4>Notes</h4> <p>${this.escapeHtml(formData.notes.notes)}</p> </div> ` :''} ${formData.notes.reminders ? ` <div class="notes-item"> <h4>Reminders</h4> <p>${this.escapeHtml(formData.notes.reminders)}</p> </div> ` :''} </div> </div> ` :''} <div class="planner-actions"> <button class="btn btn-secondary" id="edit-planner-btn"> <span class="btn-icon">‚úèÔ∏è</span> Edit Planner </button> <button class="btn btn-primary" id="export-planner-btn"> <span class="btn-icon">üì§</span> Export Planner </button> </div> </div> `;await this.renderTimeWheel(tasks);this.setupPlannerInteractions();this.startTimeUpdates()} async renderTimeWheel(tasks) {const timeWheel = document.getElementById('time-wheel');if (!timeWheel) return;timeWheel.innerHTML = '';for (let hour = 0;hour < 24;hour++) {const angle = (hour * 15) - 90;const isMajor = hour % 6 === 0;const marker = document.createElement('div');marker.className = `hour-marker ${isMajor ? 'major' :'minor'}`;marker.style.transform = `rotate(${angle}deg)`;const label = document.createElement('div');label.className = 'hour-label';label.textContent = this.formatHour(hour);const radius = 42;const labelAngle = (angle * Math.PI) / 180;const x = 50 + radius * Math.cos(labelAngle);const y = 50 + radius * Math.sin(labelAngle);label.style.left = `${x}%`;label.style.top = `${y}%`;timeWheel.appendChild(marker);timeWheel.appendChild(label)} tasks.forEach((task,index) => {if (task.time) {const [hours,minutes] = task.time.split(':').map(Number);const taskAngle = (hours + minutes / 60) * 15 - 90;const timeOfDay = this.getTimeOfDay(hours);const taskMarker = document.createElement('div');taskMarker.className = `task-marker task-marker-${timeOfDay} priority-${task.priority}`;taskMarker.dataset.taskIndex = index;taskMarker.title = `${task.time} - ${task.description}`;const radius = 35;const markerAngle = (taskAngle * Math.PI) / 180;const x = 50 + radius * Math.cos(markerAngle);const y = 50 + radius * Math.sin(markerAngle);taskMarker.style.left = `${x - 1.5}%`;taskMarker.style.top = `${y - 1.5}%`;timeWheel.appendChild(taskMarker)} });this.updateCurrentTimeIndicator()} renderTaskList(tasks) {if (tasks.length === 0) {return ` <div class="no-tasks"> <p>No tasks scheduled for today.</p> </div> `} const sortedTasks = [...tasks].sort((a,b) => a.time.localeCompare(b.time));return sortedTasks.map((task,index) => ` <div class="task-item" data-task-index="${index}"> <div class="task-time">${task.time}</div> <div class="task-content"> <div class="task-description">${this.escapeHtml(task.description)}</div> <div class="task-priority priority-${task.priority}"> ${task.priority} </div> </div> <div class="task-actions"> <button class="task-btn complete" data-task-index="${index}" aria-label="Mark as complete"> <span class="btn-icon">‚úì</span> </button> </div> </div> `).join('')} setupPlannerInteractions() {const completeButtons = document.querySelectorAll('.task-btn.complete');completeButtons.forEach(btn => {btn.addEventListener('click',(e) => {const taskIndex = parseInt(e.currentTarget.dataset.taskIndex);this.toggleTaskCompletion(taskIndex)})});const editBtn = document.getElementById('edit-planner-btn');if (editBtn) {editBtn.addEventListener('click',() => this.editPlanner())} const exportBtn = document.getElementById('export-planner-btn');if (exportBtn) {exportBtn.addEventListener('click',() => this.exportPlanner())} } toggleTaskCompletion(taskIndex) {const taskItem = document.querySelector(`[data-task-index="${taskIndex}"]`);const completeBtn = taskItem?.querySelector('.task-btn.complete');if (!taskItem || !completeBtn) return;const isCompleted = taskItem.classList.contains('completed');if (isCompleted) {taskItem.classList.remove('completed');completeBtn.innerHTML = '<span class="btn-icon">‚úì</span>';completeBtn.setAttribute('aria-label','Mark as complete')} else {taskItem.classList.add('completed');completeBtn.innerHTML = '<span class="btn-icon">‚Ü©Ô∏è</span>';completeBtn.setAttribute('aria-label','Mark as incomplete')} const taskMarker = document.querySelector(`.task-marker[data-task-index="${taskIndex}"]`);if (taskMarker) {taskMarker.classList.toggle('completed',!isCompleted)} this.showNotification( isCompleted ? 'Task marked as incomplete' :'Task completed! üéâ','success' )} editPlanner() {const formSection = document.querySelector('.planner-form-section');if (formSection) {formSection.scrollIntoView({behavior:'smooth' })} this.showNotification('Edit your planner in the form above','info')} exportPlanner() {if (!this.currentPlannerData) {this.showNotification('No planner data to export','error');return} const event = new CustomEvent('exportPlanner',{detail:this.currentPlannerData });document.dispatchEvent(event)} startTimeUpdates() {setInterval(() => {this.updateCurrentTimeIndicator()},60000)} updateCurrentTimeIndicator() {const currentTimeElement = document.getElementById('current-time');if (currentTimeElement) {currentTimeElement.textContent = this.getCurrentTime()} } getCurrentTime() {return new Date().toLocaleTimeString('en-US',{hour:'2-digit',minute:'2-digit',hour12:false })} getTimeOfDay(hour) {if (hour >= 5 && hour < 12) return 'morning';if (hour >= 12 && hour < 17) return 'afternoon';return 'evening'} formatHour(hour) {if (hour === 0) return '12 AM';if (hour < 12) return `${hour} AM`;if (hour === 12) return '12 PM';return `${hour - 12} PM`} formatDate(dateString) {if (!dateString) return new Date().toLocaleDateString();const date = new Date(dateString);return date.toLocaleDateString('en-US',{weekday:'long',year:'numeric',month:'long',day:'numeric' })} formatDateShort(dateString) {if (!dateString) return new Date().toLocaleDateString();const date = new Date(dateString);return date.toLocaleDateString('en-US',{month:'short',day:'numeric' })} getFormData() {const form = document.getElementById('planner-form');if (!form) return {tasks:[] };const formData = new FormData(form);const data = {personalInfo:{name:formData.get('planner-name') || '',date:formData.get('planner-date') || new Date().toISOString().split('T')[0] },tasks:this.getTasksFromForm(),notes:{notes:formData.get('notes') || '',reminders:formData.get('reminders') || '' } };return data} getTasksFromForm() {const tasks = [];const taskElements = document.querySelectorAll('.task-item');taskElements.forEach((taskElement,index) => {const timeInput = taskElement.querySelector('input[name^="task_time"]');const descInput = taskElement.querySelector('input[name^="task_description"]');const prioritySelect = taskElement.querySelector('select[name^="task_priority"]');if (timeInput && descInput && prioritySelect) {tasks.push({time:timeInput.value,description:descInput.value,priority:prioritySelect.value,completed:false })} });return tasks} setFormState(state) {const form = document.getElementById('planner-form');if (form) {form.setAttribute('data-state',state)} } showNotification(message,type = 'info') {const notification = document.createElement('div');notification.className = `notification notification-${type}`;notification.textContent = message;document.body.appendChild(notification);setTimeout(() => {notification.classList.add('show')},100);setTimeout(() => {notification.classList.remove('show');setTimeout(() => {if (notification.parentNode) {notification.parentNode.removeChild(notification)} },300)},3000)} escapeHtml(text) {const div = document.createElement('div');div.textContent = text;return div.innerHTML} } let plannerGenerator;if (document.readyState === 'loading') {document.addEventListener('DOMContentLoaded',() => {plannerGenerator = new CircularPlannerGenerator();window.plannerGenerator = plannerGenerator})} else {plannerGenerator = new CircularPlannerGenerator();window.plannerGenerator = plannerGenerator} class CanvasExport {constructor() {this.phoneSpecs = {'iPhone 15 Pro':{width:393,height:852,scale:3 },'iPhone 15':{width:393,height:852,scale:3 },'iPhone 14 Pro':{width:393,height:852,scale:3 },'iPhone 14':{width:390,height:844,scale:3 },'iPhone 13 Pro':{width:390,height:844,scale:3 },'iPhone 13':{width:390,height:844,scale:3 },'iPhone 12 Pro':{width:390,height:844,scale:3 },'iPhone 12':{width:390,height:844,scale:3 },'iPhone 11 Pro':{width:375,height:812,scale:3 },'iPhone 11':{width:414,height:896,scale:2 },'iPhone X':{width:375,height:812,scale:3 },'Samsung S24 Ultra':{width:384,height:854,scale:2 },'Samsung S24':{width:384,height:854,scale:2 },'Samsung S23 Ultra':{width:384,height:854,scale:2 },'Samsung S23':{width:384,height:854,scale:2 },'Samsung S22 Ultra':{width:384,height:854,scale:2 },'Samsung S22':{width:384,height:854,scale:2 },'Google Pixel 8 Pro':{width:412,height:915,scale:2 },'Google Pixel 8':{width:412,height:915,scale:2 },'Google Pixel 7 Pro':{width:412,height:915,scale:2 },'Google Pixel 7':{width:412,height:915,scale:2 },'OnePlus 12':{width:384,height:854,scale:2 },'OnePlus 11':{width:384,height:854,scale:2 },'Xiaomi 14':{width:384,height:854,scale:2 },'Huawei P60':{width:384,height:854,scale:2 } };this.desktopSpecs = {'Desktop Wallpaper':{width:1920,height:1080 },'Ultra-wide':{width:2560,height:1080 },'4K':{width:3840,height:2160 },'MacBook Pro':{width:2560,height:1600 },'MacBook Air':{width:2560,height:1664 } };this.init()} init() {this.setupEventListeners()} setupEventListeners() {document.addEventListener('exportPlanner',(event) => {this.showExportModal(event.detail)});const exportBtn = document.getElementById('export-btn');if (exportBtn) {exportBtn.addEventListener('click',() => this.showExportModal())} } showExportModal(plannerData = null) {if (!plannerData) {plannerData = this.getCurrentPlannerData()} if (!plannerData || !plannerData.tasks || plannerData.tasks.length === 0) {this.showNotification('No planner data to export','error');return} const modal = this.createExportModal(plannerData);document.body.appendChild(modal);setTimeout(() => {modal.classList.add('show')},10)} createExportModal(plannerData) {const modal = document.createElement('div');modal.className = 'export-modal';modal.innerHTML = ` <div class="export-modal-content"> <div class="export-modal-header"> <h3>Export Planner</h3> <button class="export-modal-close" aria-label="Close export modal">√ó</button> </div> <div class="export-modal-body"> <div class="export-options"> <div class="export-option-group"> <h4>Desktop Wallpaper</h4> <div class="export-option-grid"> ${Object.entries(this.desktopSpecs).map(([name,specs]) => ` <button class="export-option-btn" data-type="desktop" data-name="${name}" data-width="${specs.width}" data-height="${specs.height}"> <div class="export-option-name">${name}</div> <div class="export-option-size">${specs.width} √ó ${specs.height}</div> </button> `).join('')} </div> </div> <div class="export-option-group"> <h4>Phone Lockscreen</h4> <p class="export-option-description">Optimized for lockscreen wallpapers with safe areas and minimalist design</p> <div class="export-option-grid"> ${Object.entries(this.phoneSpecs).map(([name,specs]) => ` <button class="export-option-btn" data-type="phone" data-name="${name}" data-width="${specs.width}" data-height="${specs.height}" data-scale="${specs.scale}"> <div class="export-option-name">${name}</div> <div class="export-option-size">${specs.width} √ó ${specs.height}</div> <div class="export-option-type">Lockscreen</div> </button> `).join('')} </div> </div> </div> <div class="export-preview"> <h4>Preview</h4> <div class="export-preview-canvas" id="export-preview-canvas"></div> </div> </div> <div class="export-modal-footer"> <button class="btn btn-secondary" id="export-cancel-btn">Cancel</button> <button class="btn btn-primary" id="export-generate-btn" disabled> <span class="btn-icon">üì§</span> Generate Export </button> </div> </div> `;this.setupModalEventListeners(modal,plannerData);return modal} setupModalEventListeners(modal,plannerData) {const closeBtn = modal.querySelector('.export-modal-close');const cancelBtn = modal.querySelector('#export-cancel-btn');const generateBtn = modal.querySelector('#export-generate-btn');const optionBtns = modal.querySelectorAll('.export-option-btn');let selectedOption = null;const closeModal = () => {modal.classList.remove('show');setTimeout(() => {if (modal.parentNode) {modal.parentNode.removeChild(modal)} },300)};closeBtn.addEventListener('click',closeModal);cancelBtn.addEventListener('click',closeModal);optionBtns.forEach(btn => {btn.addEventListener('click',() => {optionBtns.forEach(b => b.classList.remove('selected'));btn.classList.add('selected');selectedOption = {type:btn.dataset.type,name:btn.dataset.name,width:parseInt(btn.dataset.width),height:parseInt(btn.dataset.height),scale:parseInt(btn.dataset.scale) || 2 };generateBtn.disabled = false;this.updatePreview(modal,plannerData,selectedOption)})});generateBtn.addEventListener('click',() => {if (selectedOption) {this.generateExport(plannerData,selectedOption);closeModal()} });modal.addEventListener('click',(e) => {if (e.target === modal) {closeModal()} })} updatePreview(modal,plannerData,option) {const previewCanvas = modal.querySelector('#export-preview-canvas');if (!previewCanvas) return;const canvas = document.createElement('canvas');const ctx = canvas.getContext('2d');const previewSize = 200;const aspectRatio = option.width / option.height;if (aspectRatio > 1) {canvas.width = previewSize;canvas.height = previewSize / aspectRatio} else {canvas.width = previewSize * aspectRatio;canvas.height = previewSize} this.renderPlannerToCanvas(ctx,canvas.width,canvas.height,plannerData,option);previewCanvas.innerHTML = '';previewCanvas.appendChild(canvas)} async generateExport(plannerData,option) {try {this.showNotification('Generating export...','info');this.isLockscreenExport = option.type === 'phone';const generateCanvas = () => {return new Promise((resolve) => {const createCanvas = () => {const scale = option.scale || 2;const canvas = document.createElement('canvas');const ctx = canvas.getContext('2d');canvas.width = option.width * scale;canvas.height = option.height * scale;ctx.scale(scale,scale);resolve({canvas,ctx })};if (window.requestIdleCallback) {window.requestIdleCallback(createCanvas,{timeout:1000 })} else {setTimeout(createCanvas,0)} })};const {canvas,ctx } = await generateCanvas();await this.renderPlannerToCanvas(ctx,option.width,option.height,plannerData,option);const filename = this.generateFilename(plannerData,option);canvas.toBlob((blob) => {if (!blob) {this.showNotification('Error generating image','error');return} const url = URL.createObjectURL(blob);const a = document.createElement('a');a.href = url;a.download = filename;a.setAttribute('aria-label',`Download ${filename}`);document.body.appendChild(a);a.click();document.body.removeChild(a);setTimeout(() => URL.revokeObjectURL(url),1000);this.showNotification('Export generated successfully!','success')},'image/png',1.0)} catch (error) {console.error('Export error:',error);this.showNotification('Error generating export','error')} } async renderPlannerToCanvas(ctx,width,height,plannerData,option) {const themeColors = this.getThemeColors();ctx.fillStyle = themeColors.background;ctx.fillRect(0,0,width,height);const isPhone = option.type === 'phone';const padding = isPhone ? 40 :80;const centerX = width / 2;const centerY = height / 2;if (isPhone) {await this.renderPhoneLayout(ctx,width,height,plannerData,themeColors,padding)} else {await this.renderDesktopLayout(ctx,width,height,plannerData,themeColors,padding)} } async renderPhoneLayout(ctx,width,height,plannerData,themeColors,padding) {if (this.isLockscreenExport) {return this.renderLockscreenLayout(ctx,width,height,plannerData,themeColors,padding)} const centerX = width / 2;const centerY = height / 2;ctx.fillStyle = themeColors.textPrimary;ctx.font = 'bold 24px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif';ctx.textAlign = 'center';ctx.fillText(plannerData.personalInfo.name || 'Daily Planner',centerX,60);ctx.fillStyle = themeColors.textSecondary;ctx.font = '16px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif';ctx.fillText(this.formatDate(plannerData.personalInfo.date),centerX,85);const wheelRadius = Math.min(width,height) * 0.35;this.renderTimeWheel(ctx,centerX,centerY,wheelRadius,plannerData,themeColors);const tasksY = centerY + wheelRadius + 60;this.renderTasksList(ctx,width,tasksY,plannerData,themeColors,true);if (plannerData.notes.notes || plannerData.notes.reminders) {const notesY = height - 100;this.renderNotes(ctx,width,notesY,plannerData,themeColors,true)} } async renderDesktopLayout(ctx,width,height,plannerData,themeColors,padding) {const centerX = width / 2;const centerY = height / 2;ctx.fillStyle = themeColors.textPrimary;ctx.font = 'bold 36px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif';ctx.textAlign = 'center';ctx.fillText(plannerData.personalInfo.name || 'Daily Planner',centerX,80);ctx.fillStyle = themeColors.textSecondary;ctx.font = '20px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif';ctx.fillText(this.formatDate(plannerData.personalInfo.date),centerX,110);const leftX = width * 0.25;const rightX = width * 0.75;const wheelRadius = Math.min(width,height) * 0.25;this.renderTimeWheel(ctx,leftX,centerY,wheelRadius,plannerData,themeColors);this.renderTasksList(ctx,rightX,centerY,plannerData,themeColors,false);if (plannerData.notes.notes || plannerData.notes.reminders) {const notesY = height - 120;this.renderNotes(ctx,width,notesY,plannerData,themeColors,false)} } renderTimeWheel(ctx,centerX,centerY,radius,plannerData,themeColors) {ctx.strokeStyle = themeColors.border;ctx.lineWidth = 3;ctx.beginPath();ctx.arc(centerX,centerY,radius,0,2 * Math.PI);ctx.stroke();ctx.fillStyle = themeColors.surface;ctx.beginPath();ctx.arc(centerX,centerY,radius * 0.3,0,2 * Math.PI);ctx.fill();ctx.strokeStyle = themeColors.border;ctx.lineWidth = 2;ctx.stroke();ctx.fillStyle = themeColors.textPrimary;ctx.font = 'bold 16px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif';ctx.textAlign = 'center';ctx.fillText(this.formatDateShort(plannerData.personalInfo.date),centerX,centerY - 5);ctx.fillStyle = themeColors.textSecondary;ctx.font = '12px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif';ctx.fillText(plannerData.personalInfo.name || 'You',centerX,centerY + 10);for (let hour = 0;hour < 24;hour++) {const angle = (hour * 15) - 90;const isMajor = hour % 6 === 0;const startRadius = radius * 0.85;const endRadius = radius * 0.95;const startX = centerX + startRadius * Math.cos(angle * Math.PI / 180);const startY = centerY + startRadius * Math.sin(angle * Math.PI / 180);const endX = centerX + endRadius * Math.cos(angle * Math.PI / 180);const endY = centerY + endRadius * Math.sin(angle * Math.PI / 180);ctx.strokeStyle = isMajor ? themeColors.textSecondary :themeColors.textMuted;ctx.lineWidth = isMajor ? 2 :1;ctx.beginPath();ctx.moveTo(startX,startY);ctx.lineTo(endX,endY);ctx.stroke();if (isMajor) {const labelRadius = radius * 1.1;const labelX = centerX + labelRadius * Math.cos(angle * Math.PI / 180);const labelY = centerY + labelRadius * Math.sin(angle * Math.PI / 180);ctx.fillStyle = themeColors.textSecondary;ctx.font = '10px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif';ctx.textAlign = 'center';ctx.fillText(this.formatHour(hour),labelX,labelY + 3)} } plannerData.tasks.forEach((task,index) => {if (task.time) {const [hours,minutes] = task.time.split(':').map(Number);const taskAngle = (hours + minutes / 60) * 15 - 90;const timeOfDay = this.getTimeOfDay(hours);const markerRadius = radius * 0.7;const markerX = centerX + markerRadius * Math.cos(taskAngle * Math.PI / 180);const markerY = centerY + markerRadius * Math.sin(taskAngle * Math.PI / 180);ctx.fillStyle = this.getTimeOfDayColor(timeOfDay,themeColors);ctx.beginPath();ctx.arc(markerX,markerY,6,0,2 * Math.PI);ctx.fill();if (task.priority === 'high' || task.priority === 'urgent') {ctx.strokeStyle = themeColors.danger;ctx.lineWidth = 2;ctx.beginPath();ctx.arc(markerX,markerY,8,0,2 * Math.PI);ctx.stroke()} } })} renderTasksList(ctx,x,y,plannerData,themeColors,isCompact) {const tasks = plannerData.tasks.filter(task => task.time && task.description);if (tasks.length === 0) return;const sortedTasks = [...tasks].sort((a,b) => a.time.localeCompare(b.time));ctx.fillStyle = themeColors.textPrimary;ctx.font = isCompact ? 'bold 14px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif' :'bold 18px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif';ctx.textAlign = 'left';ctx.fillText('Today\'s Tasks',x,y);const startY = y + (isCompact ? 25 :35);const lineHeight = isCompact ? 20 :25;const maxTasks = isCompact ? 6 :10;sortedTasks.slice(0,maxTasks).forEach((task,index) => {const taskY = startY + (index * lineHeight);ctx.fillStyle = themeColors.textSecondary;ctx.font = isCompact ? '12px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif' :'14px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif';ctx.fillText(task.time,x,taskY);ctx.fillStyle = themeColors.textPrimary;ctx.font = isCompact ? '12px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif' :'14px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif';const descX = x + (isCompact ? 60 :80);const maxWidth = isCompact ? 200 :300;this.wrapText(ctx,task.description,descX,taskY,maxWidth,lineHeight);const priorityColor = this.getPriorityColor(task.priority,themeColors);ctx.fillStyle = priorityColor;ctx.beginPath();ctx.arc(descX - 15,taskY - 5,3,0,2 * Math.PI);ctx.fill()});if (tasks.length > maxTasks) {const moreY = startY + (maxTasks * lineHeight) + 10;ctx.fillStyle = themeColors.textMuted;ctx.font = isCompact ? '10px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif' :'12px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif';ctx.fillText(`+${tasks.length - maxTasks} more tasks`,x,moreY)} } renderNotes(ctx,width,y,plannerData,themeColors,isCompact) {if (!plannerData.notes.notes && !plannerData.notes.reminders) return;const centerX = width / 2;ctx.fillStyle = themeColors.textPrimary;ctx.font = isCompact ? 'bold 12px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif' :'bold 16px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif';ctx.textAlign = 'center';ctx.fillText('Notes & Reminders',centerX,y);let currentY = y + (isCompact ? 20 :30);if (plannerData.notes.notes) {ctx.fillStyle = themeColors.textSecondary;ctx.font = isCompact ? '10px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif' :'12px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif';ctx.textAlign = 'center';const maxWidth = isCompact ? width - 40 :width - 80;currentY = this.wrapText(ctx,plannerData.notes.notes,centerX,currentY,maxWidth,isCompact ? 15 :18)} if (plannerData.notes.reminders) {currentY += isCompact ? 10 :15;ctx.fillStyle = themeColors.textSecondary;ctx.font = isCompact ? '10px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif' :'12px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif';ctx.textAlign = 'center';const maxWidth = isCompact ? width - 40 :width - 80;this.wrapText(ctx,plannerData.notes.reminders,centerX,currentY,maxWidth,isCompact ? 15 :18)} } wrapText(ctx,text,x,y,maxWidth,lineHeight) {const words = text.split(' ');let line = '';let currentY = y;for (let n = 0;n < words.length;n++) {const testLine = line + words[n] + ' ';const metrics = ctx.measureText(testLine);const testWidth = metrics.width;if (testWidth > maxWidth && n > 0) {ctx.fillText(line,x,currentY);line = words[n] + ' ';currentY += lineHeight} else {line = testLine} } ctx.fillText(line,x,currentY);return currentY + lineHeight} async renderLockscreenLayout(ctx,width,height,plannerData,themeColors,padding) {const safeAreas = this.calculateSafeAreas(width,height);this.renderLockscreenBackground(ctx,width,height,themeColors);this.renderLockscreenTimeArea(ctx,width,height,plannerData,themeColors,safeAreas);this.renderLockscreenTasks(ctx,width,height,plannerData,themeColors,safeAreas);if (plannerData.personalInfo.name) {this.renderLockscreenUserName(ctx,width,height,plannerData,themeColors,safeAreas)} this.renderLockscreenBranding(ctx,width,height,plannerData,themeColors,safeAreas)} calculateSafeAreas(width,height) {const isNotch = width >= 375 && height >= 812;const isAndroid = width >= 384 && height >= 854;return {top:isNotch ? 60 :40,bottom:100,left:20,right:20,timeArea:{top:isNotch ? 120 :80,height:120,left:20,right:20 },contentArea:{top:isNotch ? 260 :220,bottom:120,left:20,right:20 } }} renderLockscreenBackground(ctx,width,height,themeColors) {const gradient = ctx.createLinearGradient(0,0,0,height);if (themeColors.background.includes('#ffffff') || themeColors.background.includes('255,255,255')) {gradient.addColorStop(0,this.lightenColor(themeColors.background,0.05));gradient.addColorStop(1,this.darkenColor(themeColors.background,0.05))} else {gradient.addColorStop(0,this.lightenColor(themeColors.background,0.1));gradient.addColorStop(1,this.darkenColor(themeColors.background,0.1))} ctx.fillStyle = gradient;ctx.fillRect(0,0,width,height);this.renderSubtleTexture(ctx,width,height,themeColors)} renderSubtleTexture(ctx,width,height,themeColors) {const dotSize = 1;const spacing = 40;const opacity = themeColors.background.includes('#ffffff') ? 0.03 :0.05;ctx.fillStyle = this.hexToRgba(themeColors.textPrimary,opacity);for (let x = 0;x < width;x += spacing) {for (let y = 0;y < height;y += spacing) {const offsetX = (Math.sin(x * 0.01) * 10) % spacing;const offsetY = (Math.cos(y * 0.01) * 10) % spacing;ctx.beginPath();ctx.arc(x + offsetX,y + offsetY,dotSize,0,2 * Math.PI);ctx.fill()} } } renderLockscreenTimeArea(ctx,width,height,plannerData,themeColors,safeAreas) {const timeArea = safeAreas.timeArea;const centerX = width / 2;ctx.fillStyle = this.hexToRgba(themeColors.textSecondary,0.3);ctx.font = '12px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif';ctx.textAlign = 'center';ctx.fillText(this.formatDateShort(plannerData.personalInfo.date),centerX,timeArea.top + 20)} renderLockscreenTasks(ctx,width,height,plannerData,themeColors,safeAreas) {const tasks = plannerData.tasks.filter(task => task.time && task.description);if (tasks.length === 0) return;const contentArea = safeAreas.contentArea;const centerX = width / 2;const availableWidth = width - contentArea.left - contentArea.right;const cardWidth = Math.min(availableWidth - 20,300);const cardSpacing = 12;const sortedTasks = [...tasks].sort((a,b) => {const timeA = a.time;const timeB = b.time;const priorityOrder = {urgent:4,high:3,medium:2,low:1 };const priorityA = priorityOrder[a.priority] || 2;const priorityB = priorityOrder[b.priority] || 2;if (priorityA !== priorityB) return priorityB - priorityA;return timeA.localeCompare(timeB)});const maxTasks = Math.min(sortedTasks.length,4);const totalHeight = (maxTasks * 60) + ((maxTasks - 1) * cardSpacing);const startY = contentArea.top + (contentArea.bottom - contentArea.top - totalHeight) / 2;sortedTasks.slice(0,maxTasks).forEach((task,index) => {const cardY = startY + (index * (60 + cardSpacing));this.renderLockscreenTaskCard(ctx,centerX,cardY,cardWidth,task,themeColors)})} renderLockscreenTaskCard(ctx,centerX,y,width,task,themeColors) {const cardHeight = 50;const cardX = centerX - width / 2;ctx.fillStyle = this.hexToRgba(themeColors.surface,0.8);ctx.strokeStyle = this.hexToRgba(themeColors.border,0.3);ctx.lineWidth = 1;this.roundRect(ctx,cardX,y,width,cardHeight,12);ctx.fill();ctx.stroke();const priorityColor = this.getPriorityColor(task.priority,themeColors);ctx.fillStyle = priorityColor;ctx.beginPath();ctx.arc(cardX + 15,y + cardHeight / 2,4,0,2 * Math.PI);ctx.fill();ctx.fillStyle = this.hexToRgba(themeColors.textSecondary,0.8);ctx.font = 'bold 11px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif';ctx.textAlign = 'left';ctx.fillText(task.time,cardX + 25,y + 18);ctx.fillStyle = this.hexToRgba(themeColors.textPrimary,0.9);ctx.font = '12px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif';ctx.textAlign = 'left';const maxDescWidth = width - 80;const description = this.truncateText(ctx,task.description,maxDescWidth);ctx.fillText(description,cardX + 25,y + 35);const [hours] = task.time.split(':').map(Number);const timeOfDay = this.getTimeOfDay(hours);const timeColor = this.getTimeOfDayColor(timeOfDay,themeColors);ctx.fillStyle = this.hexToRgba(timeColor,0.6);ctx.beginPath();ctx.arc(cardX + width - 15,y + cardHeight / 2,3,0,2 * Math.PI);ctx.fill()} renderLockscreenUserName(ctx,width,height,plannerData,themeColors,safeAreas) {const centerX = width / 2;const userNameY = safeAreas.contentArea.bottom - 40;ctx.fillStyle = this.hexToRgba(themeColors.textPrimary,0.6);ctx.font = '14px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif';ctx.textAlign = 'center';ctx.fillText(`Hello,${plannerData.personalInfo.name}`,centerX,userNameY)} renderLockscreenBranding(ctx,width,height,plannerData,themeColors,safeAreas) {const centerX = width / 2;const brandingY = height - 30;ctx.fillStyle = this.hexToRgba(themeColors.textMuted,0.4);ctx.font = '10px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif';ctx.textAlign = 'center';ctx.fillText('Circular Daily Planner',centerX,brandingY)} roundRect(ctx,x,y,width,height,radius) {ctx.beginPath();ctx.moveTo(x + radius,y);ctx.lineTo(x + width - radius,y);ctx.quadraticCurveTo(x + width,y,x + width,y + radius);ctx.lineTo(x + width,y + height - radius);ctx.quadraticCurveTo(x + width,y + height,x + width - radius,y + height);ctx.lineTo(x + radius,y + height);ctx.quadraticCurveTo(x,y + height,x,y + height - radius);ctx.lineTo(x,y + radius);ctx.quadraticCurveTo(x,y,x + radius,y);ctx.closePath()} truncateText(ctx,text,maxWidth) {if (ctx.measureText(text).width <= maxWidth) {return text} let truncated = text;while (ctx.measureText(truncated + '...').width > maxWidth && truncated.length > 0) {truncated = truncated.slice(0,-1)} return truncated + '...'} hexToRgba(hex,alpha) {const r = parseInt(hex.slice(1,3),16);const g = parseInt(hex.slice(3,5),16);const b = parseInt(hex.slice(5,7),16);return `rgba(${r},${g},${b},${alpha})`} lightenColor(hex,amount) {const r = Math.min(255,parseInt(hex.slice(1,3),16) + Math.round(255 * amount));const g = Math.min(255,parseInt(hex.slice(3,5),16) + Math.round(255 * amount));const b = Math.min(255,parseInt(hex.slice(5,7),16) + Math.round(255 * amount));return `#${r.toString(16).padStart(2,'0')}${g.toString(16).padStart(2,'0')}${b.toString(16).padStart(2,'0')}`} darkenColor(hex,amount) {const r = Math.max(0,parseInt(hex.slice(1,3),16) - Math.round(255 * amount));const g = Math.max(0,parseInt(hex.slice(3,5),16) - Math.round(255 * amount));const b = Math.max(0,parseInt(hex.slice(5,7),16) - Math.round(255 * amount));return `#${r.toString(16).padStart(2,'0')}${g.toString(16).padStart(2,'0')}${b.toString(16).padStart(2,'0')}`} getThemeColors() {const computedStyle = getComputedStyle(document.body);return {background:computedStyle.getPropertyValue('--bg-primary').trim() || '#ffffff',surface:computedStyle.getPropertyValue('--surface-card').trim() || '#ffffff',textPrimary:computedStyle.getPropertyValue('--text-primary').trim() || '#212529',textSecondary:computedStyle.getPropertyValue('--text-secondary').trim() || '#6c757d',textMuted:computedStyle.getPropertyValue('--text-muted').trim() || '#adb5bd',accent:computedStyle.getPropertyValue('--interactive-primary').trim() || '#0d6efd',border:computedStyle.getPropertyValue('--border-light').trim() || '#e9ecef',danger:computedStyle.getPropertyValue('--interactive-danger').trim() || '#dc3545',success:computedStyle.getPropertyValue('--interactive-success').trim() || '#198754',morning:computedStyle.getPropertyValue('--accent-morning').trim() || '#fd7e14',afternoon:computedStyle.getPropertyValue('--accent-afternoon').trim() || '#0d6efd',evening:computedStyle.getPropertyValue('--accent-evening').trim() || '#6f42c1' }} getTimeOfDayColor(timeOfDay,themeColors) {switch (timeOfDay) {case 'morning':return themeColors.morning;case 'afternoon':return themeColors.afternoon;case 'evening':return themeColors.evening;default:return themeColors.accent} } getPriorityColor(priority,themeColors) {switch (priority) {case 'urgent':return themeColors.danger;case 'high':return themeColors.danger;case 'medium':return themeColors.accent;case 'low':return themeColors.textMuted;default:return themeColors.accent} } getTimeOfDay(hour) {if (hour >= 5 && hour < 12) return 'morning';if (hour >= 12 && hour < 17) return 'afternoon';return 'evening'} formatHour(hour) {if (hour === 0) return '12 AM';if (hour < 12) return `${hour} AM`;if (hour === 12) return '12 PM';return `${hour - 12} PM`} formatDate(dateString) {if (!dateString) return new Date().toLocaleDateString();const date = new Date(dateString);return date.toLocaleDateString('en-US',{weekday:'long',year:'numeric',month:'long',day:'numeric' })} formatDateShort(dateString) {if (!dateString) return new Date().toLocaleDateString();const date = new Date(dateString);return date.toLocaleDateString('en-US',{month:'short',day:'numeric' })} generateFilename(plannerData,option) {const name = plannerData.personalInfo.name || 'Planner';const date = plannerData.personalInfo.date || new Date().toISOString().split('T')[0];const model = option.name.replace(/\s+/g,'-').toLowerCase();const timestamp = new Date().toISOString().split('T')[0];return `${name}-${date}-${model}-${timestamp}.png`} getCurrentPlannerData() {if (window.plannerGenerator && window.plannerGenerator.currentPlannerData) {return window.plannerGenerator.currentPlannerData} return this.getFormData()} getFormData() {const form = document.getElementById('planner-form');if (!form) return null;const formData = new FormData(form);const tasks = this.getTasksFromForm();return {personalInfo:{name:formData.get('planner-name') || '',date:formData.get('planner-date') || new Date().toISOString().split('T')[0] },tasks:tasks,notes:{notes:formData.get('notes') || '',reminders:formData.get('reminders') || '' } }} getTasksFromForm() {const tasks = [];const taskElements = document.querySelectorAll('.task-item');taskElements.forEach((taskElement,index) => {const timeInput = taskElement.querySelector('input[name^="task_time"]');const descInput = taskElement.querySelector('input[name^="task_description"]');const prioritySelect = taskElement.querySelector('select[name^="task_priority"]');if (timeInput && descInput && prioritySelect) {tasks.push({time:timeInput.value,description:descInput.value,priority:prioritySelect.value,completed:false })} });return tasks} showNotification(message,type = 'info') {const notification = document.createElement('div');notification.className = `notification notification-${type}`;notification.textContent = message;document.body.appendChild(notification);setTimeout(() => {notification.classList.add('show')},100);setTimeout(() => {notification.classList.remove('show');setTimeout(() => {if (notification.parentNode) {notification.parentNode.removeChild(notification)} },300)},3000)} } let canvasExport;if (document.readyState === 'loading') {document.addEventListener('DOMContentLoaded',() => {canvasExport = new CanvasExport()})} else {canvasExport = new CanvasExport()}